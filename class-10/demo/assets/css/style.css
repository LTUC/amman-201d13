/* Import font style
https://fonts.google.com
*/
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700;900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Englebert&display=swap');

/* If you have a custom fonts locally*/
/* @font-face {
    font-family: 'waleedFont';
    src: url(../fonts/waleed.ttf);
    font-weight: 700;
} */

/* Start a variable container*/
:root {
    /* CSS variable does not have any spaces like js but you can separate between words with - */
    /* --white-color-example: #fff */
    --white: #fff;
}


*, *::before, *::after {
    /* 
    The actual width and height foor any element have padding and the border with in it so with box-sizing
    we till the browser you must contain the border and the padding
    Width of the element = width + padding + border
    */
    box-sizing: border-box;
}

body {
    background: #f1f1f1;
    width: 1100px;
    margin: auto;

    /* each line take 1.5 of height  */
    line-height: 1.5;
    font-family: 'Roboto', serif;

    /* padding: (top, bottom) (left, right) */
    padding: 0 10px;

}

img {
    width: 100%;
}

a {
    /* 
    text-decoration for any addition on the text like under line, strock, etc
    text-transform control the text how it should look like
    */
    text-decoration: none;
    text-transform: uppercase;
}

header {
    /* 
    to use the css variable, use the keyword var(css variable)
    */
    background: var(--white);
    height: 100px;
    position: relative;
    padding: 0 10px;
}

.logo {
    width: 70px;
    position: absolute;
    top: 50%;

    /* 
    it's another way to center element without knowing it height 
    translateY -> moving on Y axis
    translateX -> moving on X axis
    -50% till the browser to move up half to element height
    */
    transform: translateY(-50%);
}

header nav {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
}

header nav a {
    padding: 0 20px;
    color: #48426d;
    position: relative;
    line-height: 40px;
    display: inline-block;
}
header nav a:hover::after {
    content: '';
    width: 100%;
    height: 2px;
    background: #48426d;
    position: absolute;
    left: 0;
    bottom: -3px;
    display: block;
}

header nav a:hover {
    background: #48426d;
    color: var(--white);
}

main {

    /* 
    Display grid allow you to structr html element within the grid parent 
    allows you to create columns and rows and specify it's width using fraction unit fr it's like
    a functional using take the width automatically and spread it evenly 
    */
    display: grid;

    /* 
    How many column and the size of each oone
    */
    grid-template-columns: 2fr 1fr;

    /* 
    gap set spaces between rows and column
    column-gap spaces between columns only
    row-gap spaces between rows only
    */
    gap: 10px;
    margin-top: 15px;
}

main .main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
}

main .main-content .featured-img {

    /* 
    grid has lines starts from 1 to the end of column for example if yoy have 5 column then last line is 6
    you can give the element how many column to take by using grid-column and give it a value start / end
    you can give it all column by using 1 / -1 thats mean to teh end of row
    */
    grid-column: 1 / -1;
    border-top-left-radius: 15px;
    border-top-right-radius: 15px;
}

main .main-content h1 {
    text-align: center;
    font-weight: 700;
    grid-column: 1 / -1;
    margin: 20px 0;
    font-size: 32px;
}

.card {
    background: #fff;
    padding: 15px;
    position: relative;
    overflow: hidden;
}

.card img {

}

.card h2 {
    font-weight: 700;
    margin: 10px 0;
}

/* 
::after and ::before they do exists by default but you can make them appear by giving them a content
::before it appears before all element inside the parent
::after it appears after all the element inside the parent
*/
.card::after,.card::before {
    content: '';
}

.card::after {
    position: absolute;
    top: 5px;
    right: 5px;
    left: 5px;
    bottom: 5px;
    border: 1px dashed #ccc
}

.card::before {
    content: 'New';
    z-index: 1;

    /* 
    Hidde everything outside the element
    */
    overflow: hidden;
    font-size: 10px;
    font-weight: 700;
    color: #fff;
    text-transform: uppercase;
    text-align: center;
    line-height: 20px;

    /* 
    Control how the element should look like rotate it will rotate the element by degree you specify
    and its unit deg ( 45deg )
    */
    transform: rotate(45deg);
    width: 120px;
    display: block;
    top: 25px;
    right: -25px;
    position: absolute;

    /* 
    box-shadow (h-offset , v-offest, blur, spread, color(rgb, rgba, hex, name))
    */
    box-shadow: 0 3px 10px -5px rgba(0, 0, 0, 0.5);
    background: seagreen;
}

main aside {
    background: #222;
    padding: 10px;
    position: relative;
    border-top-left-radius: 15px;
    border-top-right-radius: 15px;
}

aside .item {
    width: 70%;
    display: block;

    /* 
    margin: top (left, right) bottom
    */
    margin: 0 auto 0px;
    /* border: 2px solid #fff; */
    position: relative;
}

aside .item::after {
    content: '';
    width: 1px;
    height: 100%;
    position: absolute;
    left: -25px;
    top: 0;
    display: block;
    background: #fff
}

aside .item:first-child::before {
    content: '';
    width: 10px;
    height: 10px;
    position: absolute;
    left: -29px;
    border-radius: 50%;
    top: calc(50% - 5px);
    display: block;
    background: #fff
}

footer {
    background: #222;
}

footer p {
    line-height: 50px;
    text-align: center;
    color: #fff;
    font-family: 'Englebert', sans-serif;

}


/* Responsive menu */
.nav-toggle {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    display: none;
}

.nav-toggle-label {
    position: absolute;
    top: 50%;
    right: 30px;
    transform: translateY(-50%);
    display: none;
}

.nav-toggle-label span,
.nav-toggle-label span::after,
.nav-toggle-label span::before {
    display: block;
    background: #222;
    height: 2px;
    width: 1.5em;
    border-radius: 2px;
    position: relative;
}

.nav-toggle-label span::before,
.nav-toggle-label span::after{
    content: '';
    position: absolute;
}

.nav-toggle-label span::before {
    top: 7px;
}

.nav-toggle-label span::after {
    bottom: 7px;
}

.nav-toggle:checked ~ nav {
    display: block;
    opacity:0.9;

    /* 
    simple animation what it does when it's clicked it will animate the opacity by 600ms
    */
    transition: opacity 0.6s ease 0s;
}


/* Responsive Design 
@media is to know what the media type it will trigger on
- screen
- printer
- all

and it must be specified by the width (max and min)
so for the max width
    @media screen and (max-width: 600px)

for the min width
    @media screen and (min-width: 600px)

for the specific width min, max

@media screen and (min-width: 600px) and (max-width: 1100px)
*/
@media screen and (max-width: 600px) {

    /*
    all the prop. in this area will not be triggered till the sceen size is <= 600
     */
    
    
    main {
        grid-template-columns: 1fr;
        width: 100%;
        padding: 20px;
    }

    nav {
        /* 
        use !important to force changes on prop. 
        */
        width: 100%;
        top: 100%!important;
        right: 0!important;
        transform: none!important;
        background: #fff;
        opacity: 0;
        /* -webkit-filter: drop-shadow(5px 5px 3px #ccc);
        filter: drop-shadow(5px 5px 3px #ccc); */
    
    }

    nav a {
        display: block!important;
        text-align: center;
        line-height: 40px!important;
    }

    .nav-toggle-label {
        display: block;
    }

    main .main-content {
        /* 
        Change the column template
        */
        grid-template-columns: 1fr;
    }

    aside {
        /* 
        Hide the asiide on the small screen
        */
        display: none;
    }
}